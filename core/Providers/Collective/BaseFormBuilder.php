<?php

namespace Core\Providers\Collective;

use Collective\Html\FormBuilder;
use Collective\Html\HtmlBuilder;
use Illuminate\Contracts\Routing\UrlGenerator;
use Illuminate\Contracts\View\Factory;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Lang;
use Illuminate\Support\HtmlString;

class BaseFormBuilder extends FormBuilder
{
    const SHOW_LOADING_ENABLE = 1;

    protected $_hasValidateMsg = false;

    /**
     * CustomFormBuilder constructor.
     *
     * @param HtmlBuilder $html
     * @param UrlGenerator $url
     * @param Factory $view
     * @param $csrfToken
     * @param Request|null $request
     */
    public function __construct(HtmlBuilder $html, UrlGenerator $url, Factory $view, $csrfToken, Request $request = null)
    {
        parent::__construct($html, $url, $view, $csrfToken, $request);
    }

    /**
     * @param array $options
     * @return HtmlString
     */
    public function open(array $options = [])
    {
        $options['enctype'] = 'multipart/form-data';
        if (!isset($options['show-loading'])) {
            $options['show-loading'] = self::SHOW_LOADING_ENABLE;
        }

        return parent::open($options);
    }

    /**
     * Input text html
     *
     * @param string $name
     * @param null $value
     * @param array $options
     * @return HtmlString
     */
    public function text($name, $value = null, $options = [])
    {
        if (!isset($options['show_error']) || !$options['show_error']) {
            $options['class'] = isset($options['class']) ? $options['class'] . ' show-error' : ' show-error';
        }

        return parent::text($name, $value, $options);
    }

    /**
     * select box html
     *
     * @param string $name
     * @param array $list
     * @param null $selected
     * @param array $selectAttributes
     * @param array $optionsAttributes
     * @param array $optgroupsAttributes
     * @return HtmlString
     */
    public function select($name, $list = [], $selected = null, array $selectAttributes = [], array $optionsAttributes = [], array $optgroupsAttributes = [])
    {
        if (!isset($selectAttributes['show_error']) || !$selectAttributes['show_error']) {
            $selectAttributes['class'] = isset($selectAttributes['class']) ? $selectAttributes['class'] . ' show-error' : ' show-error';
        }

        return parent::select($name, $list, $selected, $selectAttributes, $optionsAttributes, $optgroupsAttributes); // TODO: Change the autogenerated stub
    }

    /**
     * Input file html, preview image html, error message html
     *
     * @param $name
     * @param array $options
     * @return string
     */
    public function upload($name, $options = [])
    {
        // list field upload
        $input = '<input type="hidden" name="upload_fields[]" value="' . $name . '">';

        // show error message
        $input .= '<div class="show-error-message"></div>';

        $this->_setPreviewFile($name, $input, $options);

        // set message validate file upload
        $this->_setValidateFileMsg($input);

        // options
        $options['class'] = data_get($options, 'class', 'input-file');
        $options['id'] = 'uploadFile-' . $name;
        $options['data-label'] = $options['data-label'] ?? $name;
        $options['ext'] = implode(',', $options['ext'] ?? []);
        $options['size'] = implode(',', $options['size'] ?? []);

        // input file
        $inputFile = $this->input('file', $name, null, $options);

        return $inputFile . $input;
    }

    /**
     * @param $name
     * @param $input
     * @param $options
     */
    protected function _setPreviewFile($name, &$input, $options)
    {
        $fileType = data_get($options, 'type', 'image');
        $fileUploaded = data_get($options, 'file-uploaded');
        $showRemoveType = data_get($options, 'show_remove_type');
        $previewUrl = data_get($options, 'preview-url');
        $input .= '<div id="preview-file-' . $name . '" class="mt-2 preview-file ' . ($fileType == 'image' ? 'preview-image ' : '') . '">';

        if (empty($previewUrl)) {
            $input .= '</div>';

            return;
        }

        if ($fileType == 'image') {
            $input .= '<img class="' . data_get($options, 'preview-image-class') . '" src="' . $previewUrl . '">';
        } else {
            $input .= data_get($options, 'file_name');
        }

        if ($showRemoveType && $fileUploaded) {
            if ($showRemoveType === 'button') {
                $input .= '<button type="button" class="btn btn-danger remove-file">削除</button>';
            } else if ($showRemoveType === 'icon') {
                $input .= '<i class="remove-file la la-close"></i>';
            }

            $input .= '<input class="file-uploaded" type="hidden" value="' . $fileUploaded . '" name="' . $name . '">';
        }

        $input .= '</div>';
    }

    /**
     * Set validate file message
     *
     * @param $input
     */
    protected function _setValidateFileMsg(&$input)
    {
        if ($this->_hasValidateMsg) {
            return;
        }

        $validateMsg = Lang::get('validation');

        $msg = [
            'min' => $validateMsg['min']['file'],
            'max' => $validateMsg['max']['file'],
            'mimes' => $validateMsg['mimes'],
        ];

        $input .= '<script> var validateFileMsg = ' . json_encode($msg) . '</script>';
        $this->_hasValidateMsg = true;
    }

}
